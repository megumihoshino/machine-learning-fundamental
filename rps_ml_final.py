# -*- coding: utf-8 -*-
"""rps_ML_final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P71EJ89wgPZSHCPeoG4l6kAsBDuAklGz

Final Project Submission for Machine Learning Fundamental Class (Rock Scissor Paper) using Convolutional Neural Network (CNN)

Personal Information
* Name    : Grace Natalia
* Email   : gracenatalia2709@gmail.com
* Address : Jl. Kebantenan IV, Jakarta Utara 14130
* Github  : https://github.com/megumihoshino
"""

# Commented out IPython magic to ensure Python compatibility.
#PREPARING TENSORBOARD
import os
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from google.colab import files
from keras.preprocessing import image
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.callbacks import TensorBoard, ModelCheckpoint
from tensorflow.keras.preprocessing.image import ImageDataGenerator
# %matplotlib inline

#1. loading dataset from website
!wget --no-check-certificate \
      https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip

#2. EXTRACTING DATASET
import zipfile, os
local_zip = '/content/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

#3. CREATING BASE DIRECTORY
base_dir = '/content/rockpaperscissors/rps-cv-images'

#4. CHECKING DIRECTORY
os.listdir(base_dir)

#5. CHECKING DATASET

rock_dir = os.path.join(base_dir, 'rock')
paper_dir = os.path.join(base_dir, 'paper')
scissors_dir = os.path.join(base_dir, 'scissors')
print('rock =', len(os.listdir(rock_dir)))
print('paper =', len(os.listdir(paper_dir)))
print('scissors=', len(os.listdir(scissors_dir)))

#6. PREPARING DATA AUGMENTAION USING IMAGE DATA GENERATOR
generator = ImageDataGenerator(
    rescale = 1/.255,
    rotation_range = 20,
    horizontal_flip = True,
    shear_range = 0.2,
    fill_mode = 'wrap',
    validation_split = 0.4
)

#7. DATA TRAINING AND VALIDATION FOR THE MODEL
train_generator = generator.flow_from_directory(
    base_dir,
    target_size = (150,150),
    batch_size = 16,
    class_mode = 'categorical',
    subset = 'training'
)

validation_generator = generator.flow_from_directory(
    base_dir,
    target_size = (150,150),
    batch_size = 16,
    class_mode = 'categorical',
    subset= 'validation'
)

#8. BUILDING MODEL
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32,(3,3), activation = 'relu', input_shape=(150,150,3)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax'),
])

model.summary()

#9. COMPILING MODEL
model.compile(loss = 'categorical_crossentropy',
              optimizer = RMSprop(),
              metrics=['accuracy'])

#10. IMPLEMENTING CALLBACKS FOR STOPPING WHEN ACCURACY REACHING 97%
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>= 0.988):
      print("\n Training stop!! Accuracy Reach: %2.2f%%" %(logs.get('accuracy')*100))
      self.model.stop_training = True

callbacks = myCallback()

#11. LET'S TRAIN THE MODEL

history = model.fit(
    train_generator,
    steps_per_epoch = 25,
    epochs = 25,
    validation_data = validation_generator,
    validation_steps = 5,
    verbose = 2,
    callbacks = [callbacks]
)

#check validation accuracy and train accuracy score

train_score = model.evaluate(train_generator)
validation_score = model.evaluate(validation_generator)

#12. PLOTTING LOSS TRAIN AND VALIDATION
plt.plot(history.history['loss'], 'b', label = 'Training Loss')
plt.plot(history.history['val_loss'], 'm', label = 'Validation Loss')
plt.title('Training & Validation Loss')
plt.grid(linestyle='--', linewidth=1, alpha=0.5)
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(loc = "upper right")
plt.show()

#13. PLOTTING ACCURACY TRAIN AND VALIDATION
plt.plot(history.history['accuracy'], 'r', label = 'Training Accuracy')
plt.plot(history.history['val_accuracy'], 'b', label = 'Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.grid(linestyle='--', linewidth=1, alpha=0.5)
plt.ylabel('Value')
plt.xlabel('Epoch')
plt.legend(loc = "lower right")
plt.show()

file_uploaded = files.upload()
for fn in file_uploaded.keys():
  path = fn
  img = image.load_img(path, target_size = (150,150))
  imgplot = plt.imshow(img)
  plt.plot()
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  images = np.vstack([x])

  classes = model.predict(images, batch_size = 10)
  thing = np.argmax(classes)
  print(fn)
  if thing == 0:
    print('This is paper')
  elif thing == 1:
    print('This is rock')
  elif thing == 2:
   print('This is scissor')
  else:
    print('Idk this thing..')